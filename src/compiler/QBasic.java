/* QBasic.java */
/* Generated By:JavaCC: Do not edit this line. QBasic.java */
package compiler;

import enums.*;
import nodes.blocks.*;
import nodes.variables.*;
import nodes.*;
import utils.*;
import java.io.FileInputStream;

public class QBasic implements QBasicConstants {
    public static void main(String[] args) throws ParseException {
        try {
//            QBasic parser = new QBasic(System.in);
            QBasic parser = new QBasic(new FileInputStream(Paths.FILE));
            parser.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

  final public void start() throws ParseException {Node node, n2 = null;
    Context c = new Context();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENDL:{
      jj_consume_token(ENDL);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    node = containerStmt();
node.run(c);
}

// Start: Expressions //
  final public ExpressionNode expressionStmt() throws ParseException {ExpressionNode n = new ExpressionNode();
    n = expressionOR();
{if ("" != null) return n;}
    throw new Error("Missing return statement in function");
}

// TODO: add SQR :)
  final public ExpressionNode expressionOR() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionAND();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      t = jj_consume_token(OR);
      n2 = expressionOR();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionAND() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionCON();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      t = jj_consume_token(AND);
      n2 = expressionAND();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionCON() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionPlus();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONDITIONAL_OPS:{
      t = jj_consume_token(CONDITIONAL_OPS);
      n2 = expressionCON();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionPlus() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionMul();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      t = jj_consume_token(PLUS);
      n2 = expressionPlus();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionMul() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionPow();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      t = jj_consume_token(MUL);
      n2 = expressionMul();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionPow() throws ParseException {Token t = null;
    ExpressionNode n1, n2 = null;
    n1 = expressionSign();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POW:{
      t = jj_consume_token(POW);
      n2 = expressionPow();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
if(t == null) {if ("" != null) return n1;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(n1);
        node.addChild(n2);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionSign() throws ParseException {Token t = null;
    ExpressionNode n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      t = jj_consume_token(PLUS);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    n = expressionNum();
if(t == null) {if ("" != null) return n;}
        OperationNode node = new OperationNode(t.image);
        node.addChild(new NumberNode("0"));
        node.addChild(n);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode expressionNum() throws ParseException {Token t = null;
    ExpressionNode n = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_VAR:
    case NUMBER_VAR:
    case NUM:
    case STRING:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        t = jj_consume_token(NUM);
        break;
        }
      case NUMBER_VAR:{
        t = jj_consume_token(NUMBER_VAR);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
        break;
        }
      case STRING_VAR:{
        t = jj_consume_token(STRING_VAR);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(Util.isNumeric(t.image)) {
        {if ("" != null) return new NumberNode(t.image);}
    } else if(Util.isString(t.image)) {
        {if ("" != null) return new StringNode(t.image);}
    } else if(Util.getVariableType(t.image).equals(VarType.STRING)) {
        {if ("" != null) return new StringVariableNode(t.image);}
    } else {
        {if ("" != null) return new NumberVariableNode(t.image);}
    }
      break;
      }
    case LP:{
      jj_consume_token(LP);
      n = expressionOR();
      jj_consume_token(RP);
{if ("" != null) return n;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// End: Expressions //

// Start: print stmt //
  final public PrintNode printStmt() throws ParseException {PrintNode node = new PrintNode();
    ExpressionNode n1, n2 = null;
    jj_consume_token(PRINT);
    n1 = expressionStmt();
node.addChild(n1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      n2 = expressionStmt();
if(n2 != null)
            node.addChild(n2);
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: print stmt //

// Start: assign stmt //
  final public AssignNode assignStmt() throws ParseException {Token t1, op;
    ExpressionNode n;
    AssignNode assignNode = new AssignNode();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER_VAR:{
      t1 = jj_consume_token(NUMBER_VAR);
      break;
      }
    case STRING_VAR:{
      t1 = jj_consume_token(STRING_VAR);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    op = jj_consume_token(CONDITIONAL_OPS);
    n = expressionStmt();
if(!op.image.equals("=")) {if (true) throw new ParseException("invalid assignment");}
        if(Util.getVariableType(t1.image).equals(VarType.STRING)) {
            assignNode.addChild(new StringVariableNode(t1.image));
        } else {
            assignNode.addChild(new NumberVariableNode(t1.image));
        }
        assignNode.addChild(n);
        {if ("" != null) return assignNode;}
    throw new Error("Missing return statement in function");
}

// End: assign stmt //

// Start: input stmt //
  final public InputNode inputStmt() throws ParseException {Token t1 = null, t2 = null;
    InputNode node = new InputNode();
    jj_consume_token(INPUT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      t1 = jj_consume_token(STRING);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
if(t1 != null) node.addChild(new StringNode(t1.image));
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER_VAR:{
      t2 = jj_consume_token(NUMBER_VAR);
      break;
      }
    case STRING_VAR:{
      t2 = jj_consume_token(STRING_VAR);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(Util.getVariableType(t2.image).equals(VarType.STRING)) {
            node.addChild(new StringVariableNode(t2.image));
        } else {
            node.addChild(new NumberVariableNode(t2.image));
        }
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: input stmt //

// Start: if stmt //
  final public IfNode ifStmt() throws ParseException {IfNode ifNode = new IfNode();
    ExpressionNode e1 = null, e2 = null;
    ContainerNode container1 = null, container2 = null, container3 = null;
    jj_consume_token(IF);
    e1 = expressionStmt();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENDL:{
      jj_consume_token(ENDL);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
ifNode.addChild(e1);
    container1 = containerStmt();
ifNode.addChild(container1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_IF:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_2;
      }
      jj_consume_token(ELSE_IF);
      e2 = expressionStmt();
      jj_consume_token(THEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENDL:{
        jj_consume_token(ENDL);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
ifNode.addChild(e2);
      container2 = containerStmt();
ifNode.addChild(container2);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENDL:{
        jj_consume_token(ENDL);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      container3 = containerStmt();
ifNode.addChild(container3);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
{if ("" != null) return ifNode;}
    throw new Error("Missing return statement in function");
}

// End: if stmt //

// Start: for stmt //
  final public ForLoopNode forLoopStmt() throws ParseException {Token cnt;
    ExpressionNode to, step = null;
    AssignNode assign = null;
    ContainerNode container = null;
    ForLoopNode forLoopNode = new ForLoopNode();
    jj_consume_token(FOR);
    assign = assignStmt();
forLoopNode.addChild(assign);
    jj_consume_token(TO);
    to = expressionStmt();
forLoopNode.addChild(to);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STEP:{
      jj_consume_token(STEP);
      step = expressionStmt();
forLoopNode.addChild(step);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(ENDL);
    container = containerStmt();
forLoopNode.addChild(container);
    jj_consume_token(NEXT);
    cnt = jj_consume_token(NUMBER_VAR);
forLoopNode.addChild(new NumberVariableNode(cnt.image));
        {if ("" != null) return forLoopNode;}
    throw new Error("Missing return statement in function");
}

// End: for stmt //

// Start: do while stmt //
  final public DoWhileNode doWhileStmt() throws ParseException {ContainerNode container;
    ExpressionNode e;
    DoWhileNode node = new DoWhileNode();
    jj_consume_token(DO);
    jj_consume_token(ENDL);
    container = containerStmt();
node.addChild(container);
    jj_consume_token(LOOP);
    jj_consume_token(WHILE);
    e = expressionStmt();
node.addChild(e);
        {if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: do while stmt //

// Start: while stmt //
  final public WhileNode whileStmt() throws ParseException {ContainerNode container;
    ExpressionNode e;
    WhileNode node = new WhileNode();
    jj_consume_token(DO);
    jj_consume_token(WHILE);
    e = expressionStmt();
node.addChild(e);
    jj_consume_token(ENDL);
    container = containerStmt();
node.addChild(container);
    jj_consume_token(LOOP);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: while stmt //

// Start: until stmt //
  final public UntilNode untilStmt() throws ParseException {ContainerNode container;
    ExpressionNode e;
    UntilNode node = new UntilNode();
    jj_consume_token(DO);
    jj_consume_token(UNTIL);
    e = expressionStmt();
node.addChild(e);
    jj_consume_token(ENDL);
    container = containerStmt();
node.addChild(container);
    jj_consume_token(LOOP);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: until stmt //

// END keyword
  final public EndNode endStmt() throws ParseException {
    jj_consume_token(END);
{if ("" != null) return new EndNode();}
    throw new Error("Missing return statement in function");
}

// Start: block stmt //
  final public BlockNode blockStmt() throws ParseException {BlockNode node;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_VAR:
    case NUMBER_VAR:{
      node = assignStmt();
      break;
      }
    case INPUT:{
      node = inputStmt();
      break;
      }
    case PRINT:{
      node = printStmt();
      break;
      }
    case IF:{
      node = ifStmt();
      break;
      }
    case FOR:{
      node = forLoopStmt();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_1(2)) {
        node = doWhileStmt();
      } else if (jj_2_2(2)) {
        node = whileStmt();
      } else if (jj_2_3(2)) {
        node = untilStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case END:{
          node = endStmt();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(ENDL);
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

// End: block stmt //

// Start: container stmt //
  final public ContainerNode containerStmt() throws ParseException {ContainerNode node = new ContainerNode();
    BlockNode child;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case INPUT:
      case IF:
      case FOR:
      case DO:
      case END:
      case STRING_VAR:
      case NUMBER_VAR:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_3;
      }
      child = blockStmt();
node.addChild(child);
    }
{if ("" != null) return node;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_untilStmt_370_6_6()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_whileStmt_354_6_5()) return true;
    return false;
  }

  private boolean jj_3R_whileStmt_354_6_5()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_doWhileStmt_338_5_4()) return true;
    return false;
  }

  private boolean jj_3R_untilStmt_370_6_6()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  private boolean jj_3R_doWhileStmt_338_5_4()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(ENDL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public QBasicTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x2000000,0x1000000,0x4000000,0x100000,0x200000,0x400000,0x100000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x40,0x0,0x0,0x200,0x4000,0x800008b0,0x80000,0x800888b0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0x10d,0x40,0x1,0x8,0x1,0x10,0x0,0x10,0x10,0x0,0x0,0x1,0x0,0x1,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public QBasic(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QBasic(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new QBasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public QBasic(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new QBasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new QBasicTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public QBasic(QBasicTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(QBasicTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[41];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 41; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
