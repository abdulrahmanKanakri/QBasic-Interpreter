/* QBasicTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. QBasicTokenManager.java */
package compiler;
import enums.*;
import nodes.blocks.*;
import nodes.variables.*;
import nodes.*;
import utils.*;
import java.io.FileInputStream;

/** Token Manager. */
@SuppressWarnings ("unused")
public class QBasicTokenManager implements QBasicConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x38618b0L) != 0L)
         {
            jjmatchedKind = 32;
            return 58;
         }
         if ((active0 & 0x80440L) != 0L)
         {
            jjmatchedKind = 32;
            return 41;
         }
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 40;
         }
         if ((active0 & 0x18e1cb0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 58;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 58;
         return -1;
      case 2:
         if ((active0 & 0x61830L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return 58;
         }
         if ((active0 & 0x1880400L) != 0L)
            return 58;
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
            return 38;
         }
         if ((active0 & 0x61030L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 58;
         }
         return -1;
      case 4:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 4;
            return -1;
         }
         if ((active0 & 0x60030L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 58;
         }
         return -1;
      case 5:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 9;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x6000L);
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 39);
      case 59:
         return jjStopAtPos(0, 38);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x80440L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xa0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 94:
         return jjStopAtPos(0, 22);
      case 95:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c0420L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 82:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 58);
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(2, 7);
         break;
      case 68:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x20010L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 82:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x4040L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x30L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(5, 4);
         else if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(5, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         break;
      case 70:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(7, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x6a00000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAddTwoStates(14, 15); }
                  }
                  else if ((0x7a00000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddTwoStates(20, 22); }
                  }
                  else if ((0x840000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(18, 19); }
                  else if (curChar == 39)
                  {
                     if (kind > 3)
                        kind = 3;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(24, 11); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 62)
                     { jjCheckNAdd(11); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 6:
                  if ((0x840000000000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 10:
                  if ((0x7000000000000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 11:
                  if (curChar == 61 && kind > 26)
                     kind = 26;
                  break;
               case 12:
                  if (curChar == 62)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if ((0x7a00000000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 15:
                  if (curChar == 46)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 20:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(20, 22); }
                  break;
               case 21:
                  if (curChar != 10)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(20, 22); }
                  break;
               case 22:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(24, 11); }
                  break;
               case 24:
                  if (curChar == 62 && kind > 26)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 32 && kind > 16)
                     kind = 16;
                  break;
               case 35:
                  if (curChar == 32 && kind > 15)
                     kind = 15;
                  break;
               case 49:
                  if (curChar == 32 && kind > 8)
                     kind = 8;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 55:
                  if (curChar == 36 && kind > 31)
                     kind = 31;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if ((0x6a00000000L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  if (curChar == 69)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddStates(3, 6); }
                  }
                  else if (curChar == 92)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (curChar == 84)
                     { jjAddStates(7, 8); }
                  else if (curChar == 69)
                     { jjAddStates(9, 10); }
                  else if (curChar == 68)
                     { jjAddStates(11, 12); }
                  else if (curChar == 76)
                     { jjAddStates(13, 14); }
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  { jjAddStates(0, 2); }
                  break;
               case 6:
                  if (curChar == 92 && kind > 21)
                     kind = 21;
                  break;
               case 7:
                  if (curChar == 68 && kind > 21)
                     kind = 21;
                  break;
               case 8:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 18:
                  { jjAddStates(15, 16); }
                  break;
               case 25:
                  if (curChar == 76)
                     { jjAddStates(13, 14); }
                  break;
               case 26:
                  if (curChar == 80 && kind > 16)
                     kind = 16;
                  break;
               case 27:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 68)
                     { jjAddStates(11, 12); }
                  break;
               case 34:
                  if (curChar == 79 && kind > 15)
                     kind = 15;
                  break;
               case 36:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 69)
                     { jjAddStates(9, 10); }
                  break;
               case 42:
                  if (curChar == 69 && kind > 9)
                     kind = 9;
                  break;
               case 43:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 84)
                     { jjAddStates(7, 8); }
                  break;
               case 46:
                  if (curChar == 78 && kind > 8)
                     kind = 8;
                  break;
               case 47:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddStates(3, 6); }
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjAddStates(0, 2); }
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(15, 16); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\120\122\111\116\124\40", "\111\116\120\125\124\40", 
"\105\114\123\105\40\111\106\40", "\111\106\40", null, null, "\105\116\104\40\111\106", "\106\117\122\40", 
"\116\105\130\124\40", "\40\124\117\40", "\40\123\124\105\120\40", null, null, 
"\127\110\111\114\105\40", "\125\116\124\111\114\40", "\105\116\104", null, null, "\136", "\123\121\122", 
"\101\116\104", "\117\122", null, null, null, null, null, null, null, null, null, null, null, 
"\137", "\73", "\51", "\50", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   1, 2, 4, 54, 55, 56, 57, 48, 52, 41, 44, 34, 36, 28, 32, 18, 
   19, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 9 && (0x200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public QBasicTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public QBasicTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 58; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1fdc7fffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoSpecial = {
   0x8L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[58];
    private final int[] jjstateSet = new int[2 * 58];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
